{"version":3,"sources":["pages/Home/index.jsx","App.jsx","slices/codeSlice.js","store/store.js","serviceWorker.js","index.jsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","height","paper","padding","spacing","textAlign","color","palette","text","primary","Home","classes","className","Grid","container","item","xs","Paper","mode","fontSize","showPrintMargin","width","name","editorProps","$blockScrolling","createMuiTheme","type","background","default","secondary","App","ThemeProvider","codeSlice","createSlice","initialState","code","reducers","updateCode","state","action","payload","configureStore","reducer","codeReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gUAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,EACVC,OAAQ,SAEZC,MAAO,CACHC,QAASL,EAAMM,QAAQ,GACvBC,UAAW,SACXC,MAAOR,EAAMS,QAAQC,KAAKC,QAC1BR,OAAQ,aAID,SAASS,IACpB,IAAMC,EAAUf,IAEhB,OACI,yBAAKgB,UAAWD,EAAQZ,MACpB,kBAACc,EAAA,EAAD,CAAMC,WAAS,EAACV,QAAS,GACrB,kBAACS,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACC,EAAA,EAAD,CAAOL,UAAWD,EAAQT,OAA1B,gDAIJ,kBAACW,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAAC,IAAD,CACIE,KAAK,eACLC,SAAS,OACTrB,MAAM,UAENsB,iBAAiB,EACjBnB,OAAO,QACPoB,MAAM,OACNC,KAAK,SACLC,YAAa,CAAEC,iBAAiB,QCzBxD,IAAM1B,EAAQ2B,YAAe,CACzBlB,QAAS,CACLmB,KAAM,OACNC,WAAY,CACRC,QAAS,UACT1B,MAAO,WAEXM,KAAM,CACFC,QAAS,UACToB,UAAW,cAaRC,MARf,WACI,OACI,kBAACC,EAAA,EAAD,CAAejC,MAAOA,GAClB,kBAACY,EAAD,Q,QCpBGsB,EAVGC,YAAY,CAC1BX,KAAM,OACNY,aANiB,CACjBC,KAAM,IAMNC,SAAU,CACNC,WADM,SACKC,EAAOC,GACdD,EAAMH,KAAOI,EAAOC,YAKhC,QCbeC,cAAe,CAC1BC,QAAS,CACLP,KAAMQ,KCOMC,QACa,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCTRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUC,MAAOA,GACb,kBAAC,EAAD,QAGRC,SAASC,eAAe,SDoHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b20da953.chunk.js","sourcesContent":["import React from 'react';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-assembly_x86';\nimport 'ace-builds/src-noconflict/theme-dracula';\n\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        height: '100vh',\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.primary,\n        height: '100vh',\n    },\n}));\n\nexport default function Home() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={1}>\n                <Grid item xs={6}>\n                    <Paper className={classes.paper}>\n                        Addresses and Registers will be shown here.\n                    </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <AceEditor\n                        mode=\"assembly_x86\"\n                        fontSize=\"1rem\"\n                        theme=\"dracula\"\n                        // onChange={onChange}\n                        showPrintMargin={false}\n                        height=\"100vh\"\n                        width=\"50vw\"\n                        name=\"editor\"\n                        editorProps={{ $blockScrolling: true }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport Home from './pages/Home';\n\n/**\n * Theme color references:\n * fgColor: '#f8f8f2',\n   bgColor: '#282a36',\n   dark: '#44475a',\n   primary: '#6272a4',\n   primText: '',\n   error: '#ff5555',\n   default: '#44475a',\n   warning: '',\n */\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        background: {\n            default: '#282a36',\n            paper: '#282a36',\n        },\n        text: {\n            primary: '#f8f8f2',\n            secondary: '#6272a4',\n        },\n    },\n});\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <Home />\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    code: '',\n};\n\nconst codeSlice = createSlice({\n    name: 'code',\n    initialState,\n    reducers: {\n        updateCode(state, action) {\n            state.code = action.payload;\n        },\n    },\n});\n\nexport default codeSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport codeReducer from '../slices/codeSlice';\n\nexport default configureStore({\n    reducer: {\n        code: codeReducer,\n    },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}