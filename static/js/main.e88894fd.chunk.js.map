{"version":3,"sources":["emulator/parser/constants.js","emulator/parser/models/newLine.js","emulator/parser/models/comment.js","emulator/parser/models/mnemonic.js","emulator/parser/models/separator.js","emulator/parser/models/stringToken.js","emulator/parser/models/instruction.js","emulator/parser/models/errors.js","emulator/parser/models/operand.js","emulator/parser/lexer.js","emulator/cpu/models/register.js","emulator/cpu/registers.js","emulator/cpu/memory.js","emulator/cpu/addressing.js","emulator/cpu/core.js","emulator/parser/parser.js","emulator/emulator.js","slices/emulatorSlice.js","components/ButtonsContainer/index.jsx","components/Editor/index.jsx","components/Display/index.jsx","components/Register/index.jsx","components/RegAndMem/index.jsx","components/Emulator/index.jsx","pages/Home/index.jsx","App.jsx","store/store.js","serviceWorker.js","index.jsx"],"names":["nonToken","registers","instructionMnemonics","bitmask","index","flags","sign","zero","auxilliary","carry","overflow","directional","interrupt","trap","NewLine","value","position","lineNumber","this","name","Comment","Mnemonic","Separator","StringToken","Instruction","mnemonic","op1","op2","InvalidTokenError","Error","UnterminatedQuoteError","UnterminatedBracketError","SyntaxError","toNumber","intVal","startsWith","parseInt","size","Math","ceil","log2","Operand","ImmediateOp","type","toNum","Number","isNaN","RelativeOp","RegisterOp","endsWith","MemoryOp","slice","Lexer","buffer","bufferLength","length","c","includes","token","end","isNewLine","substring","isAlphaNum","upperCaseTok","toUpperCase","RegExp","test","indexOf","quote","separator","skipNonTokens","processNewLine","isComment","processComment","processAlphaNum","isBracket","processBrackets","isQuote","processQuote","isSeparator","processSeparator","tokens","nextTok","nextToken","push","positon","Register","initial","h","l","half","FlagRegister","flag","set","get","Registers","regs","AX","BX","CX","DX","IP","DI","SI","BP","SP","DS","ES","CS","SS","Memory","mem","initializeMem","i","addr","val","Addressing","memory","op","console","log","CPU","addressing","code","cs","forEach","elem","ip","instruction","getAddr","target","setAddr","getFlag","s","al","ah","ax","dx","prod","s1","s2","setFlag","unsetFlag","Parser","rawInstructions","getInstructionsFromTokens","instructions","cpu","tokenize","parsed","parse","loadCode","Object","entries","element","initialState","emulator","getRegisters","getMemory","emulatorSlice","createSlice","reducers","updateCode","state","action","payload","updateRegisters","updateMemory","selectCode","selectMemory","selectRegisters","actions","useStyles","makeStyles","theme","buttonsContainer","background","palette","default","color","text","primary","padding","fontAwesomeIcon","width","height","outline","display","textAlign","ButtonsContainer","classes","dispatch","useDispatch","useSelector","className","icon","faArrowLeft","faPlayCircle","onClick","step","faArrowRight","faForward","Editor","mode","fontSize","onChange","showPrintMargin","editorProps","$blockScrolling","borderRadius","border","heading","borderBottom","paddingBottom","Display","register","backgroundColor","secondary","label","regContainer","props","useState","regValue","setRegValue","reg","useEffect","id","regAndMem","marginTop","regRow","paper","overflowY","memoryRow","memHeading","fontWeight","address","marginLeft","RegAndMem","Paper","map","item","spacing","Emulator","root","flexGrow","Home","Grid","container","xs","createMuiTheme","App","ThemeProvider","configureStore","reducer","emulatorReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qVAAaA,EAAW,CACpB,IACA,MAiBSC,EAAS,UAdO,CACzB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,KAClB,KAAM,KAAM,KAAM,MAGQ,CAC1B,KAAM,KAAM,KAAM,MAGU,CAC5B,KAAM,KAAM,KAAM,OASTC,EAAuB,CAChC,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,QACA,QACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,KACA,MACA,MACA,OACA,OACA,KACA,MACA,KACA,MACA,KACA,OACA,KACA,KACA,MACA,KACA,MACA,MACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,KACA,KACA,OACA,MACA,MACA,MACA,QACA,QACA,OACA,QACA,SACA,SACA,QACA,MACA,QACA,QACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,OACA,OACA,OACA,QACA,QACA,MACA,MACA,MACA,OACA,QACA,QACA,OACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,MACA,QACA,QACA,MACA,MACA,MACA,MACA,MACA,QACA,QACA,MACA,OACA,OACA,QACA,OAGEC,EAAU,SAACC,GAAD,OAAW,GAAOA,GAErBC,EAAQ,CACjBC,KAAMH,EAAQ,GACdI,KAAMJ,EAAQ,GACdK,WAAYL,EAAQ,GACpBM,MAAON,EAAQ,GACfO,SAAUP,EAAQ,IAClBQ,YAAaR,EAAQ,IACrBS,UAAWT,EAAQ,GACnBU,KAAMV,EAAQ,IC1JGW,EACjB,cAA8C,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,oBACzCC,KAAKC,KAAO,UACZD,KAAKH,MAAQA,EACbG,KAAKF,SAAWA,EAChBE,KAAKD,WAAaA,GCLLG,EACjB,cAA8C,IAAhCL,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAAc,oBACzCC,KAAKC,KAAO,UACZD,KAAKH,MA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","file":"static/js/main.e88894fd.chunk.js","sourcesContent":["export const nonToken = [\n    ' ',\n    '\\t',\n];\n\nexport const mainRegisters = [\n    'AX', 'BX', 'CX', 'DX',\n    'AL', 'BL', 'CL', 'DL',\n    'AH', 'BH', 'CH', 'DH',\n];\n\nexport const indexRegisters = [\n    'DI', 'SI', 'BP', 'SP',\n];\n\nexport const segmentRegisters = [\n    'DS', 'ES', 'SS', 'CS',\n];\n\nexport const registers = [\n    ...mainRegisters,\n    ...indexRegisters,\n    ...segmentRegisters,\n];\n\nexport const instructionMnemonics = [\n    'AAA',\n    'AAD',\n    'AAM',\n    'AAS',\n    'ADC',\n    'ADD',\n    'AND',\n    'CALL',\n    'CBW',\n    'CLC',\n    'CLD',\n    'CLI',\n    'CMC',\n    'CMP',\n    'CMPSB',\n    'CMPSW',\n    'CWD',\n    'DAA',\n    'DAS',\n    'DEC',\n    'DIV',\n    'HLT',\n    'IDIV',\n    'IMUL',\n    'IN',\n    'INC',\n    'INT',\n    'INTO',\n    'IRET',\n    'JA',\n    'JAE',\n    'JB',\n    'JBE',\n    'JC',\n    'JCXZ',\n    'JE',\n    'JG',\n    'JGE',\n    'JL',\n    'JLE',\n    'JMP',\n    'JNA',\n    'JNAE',\n    'JNB',\n    'JNBE',\n    'JNC',\n    'JNE',\n    'JNG',\n    'JNGE',\n    'JNL',\n    'JNLE',\n    'JNO',\n    'JNP',\n    'JNS',\n    'JNZ',\n    'JO',\n    'JP',\n    'JPE',\n    'JPO',\n    'JS',\n    'JZ',\n    'LAHF',\n    'LDS',\n    'LEA',\n    'LES',\n    'LODSB',\n    'LODSW',\n    'LOOP',\n    'LOOPE',\n    'LOOPNE',\n    'LOOPNZ',\n    'LOOPZ',\n    'MOV',\n    'MOVSB',\n    'MOVSW',\n    'MUL',\n    'NEG',\n    'NOP',\n    'NOT',\n    'OR',\n    'OUT',\n    'POP',\n    'POPA',\n    'POPF',\n    'PUSH',\n    'PUSHA',\n    'PUSHF',\n    'RCL',\n    'RCR',\n    'REP',\n    'REPE',\n    'REPNE',\n    'REPNZ',\n    'REPZ',\n    'RET',\n    'RETF',\n    'ROL',\n    'ROR',\n    'SAHF',\n    'SAL',\n    'SAR',\n    'SBB',\n    'SCASB',\n    'SCASW',\n    'SHL',\n    'SHR',\n    'STC',\n    'STD',\n    'STI',\n    'STOSB',\n    'STOSW',\n    'SUB',\n    'TEST',\n    'XCHG',\n    'XLATB',\n    'XOR',\n];\n\nconst bitmask = (index) => 0b1 << index;\n\nexport const flags = {\n    sign: bitmask(7),\n    zero: bitmask(6),\n    auxilliary: bitmask(4),\n    carry: bitmask(0),\n    overflow: bitmask(11),\n    directional: bitmask(10),\n    interrupt: bitmask(9),\n    trap: bitmask(8),\n};\n","export default class NewLine {\n    constructor({ value, position, lineNumber }) {\n        this.name = 'NEWLINE';\n        this.value = value;\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n","export default class Comment {\n    constructor({ value, position, lineNumber }) {\n        this.name = 'COMMENT';\n        this.value = value;\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n","export default class Mnemonic {\n    constructor({ value, position, lineNumber }) {\n        this.name = 'MNEMONIC';\n        this.value = value;\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n","export default class Separator {\n    constructor({ value, position, lineNumber }) {\n        this.name = 'SEPARATOR';\n        this.value = value;\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n","export default class StringToken {\n    constructor({ value, position, lineNumber }) {\n        this.name = 'STRING';\n        this.value = value;\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n","export default class Instruction {\n    constructor({ mnemonic, op1, op2 }) {\n        this.mnemonic = mnemonic;\n        this.op1 = op1;\n        this.op2 = op2;\n    }\n}\n","export class InvalidTokenError extends Error {\n    constructor({ position, lineNumber }) {\n        super();\n        this.name = 'Invalid Token';\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n\nexport class UnterminatedQuoteError extends Error {\n    constructor({ position, lineNumber }) {\n        super();\n        this.name = 'Unterminated Quote';\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n\nexport class UnterminatedBracketError extends Error {\n    constructor({ position, lineNumber }) {\n        super();\n        this.name = 'Unterminated Bracket';\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n\nexport class SyntaxError extends Error {\n    constructor({ position, lineNumber }) {\n        super();\n        this.name = 'Syntax Error';\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n","import { InvalidTokenError } from './errors.js';\n\nfunction toNumber(value) {\n    let intVal;\n    if (value.startsWith('0B')) {\n        intVal = parseInt(value, 2);\n    } else if (value.startsWith('0X')) {\n        intVal = parseInt(value, 16);\n    } else if (value.startsWith('0')) {\n        intVal = parseInt(value, 8);\n    } else {\n        intVal = parseInt(value, 10);\n    }\n\n    const size = Math.ceil(Math.log2(intVal));\n    if (intVal > 2 ** 16) {\n        throw Error('Immediate Value too large, only max 16 bit allowd');\n    }\n    return {\n        value: intVal,\n        size,\n    };\n}\n\n/**\n * Base operand class.\n */\nclass Operand {\n    constructor(value, position, lineNumber) {\n        this.name = 'OPERAND';\n        this.value = value;\n        this.size = 0;\n        this.position = position;\n        this.lineNumber = lineNumber;\n    }\n}\n\n/**\n * An object of ImmediateOp will have the value as a\n * Number in the `value` attribute.\n */\nexport class ImmediateOp extends Operand {\n    constructor({ value, position, lineNumber }) {\n        super(value, position, lineNumber);\n        this.type = 'IMMEDIATE';\n\n        const toNum = toNumber(value);\n        this.value = toNum.value;\n        this.size = toNum.size;\n\n        if (Number.isNaN(this.value)) {\n            throw new InvalidTokenError({\n                position: this.position,\n                lineNumber: this.lineNumber,\n            });\n        }\n    }\n}\n\n/**\n * An object of RelativeOp\n */\nexport class RelativeOp extends Operand {\n    constructor({ value, position, lineNumber }) {\n        super(value, position, lineNumber);\n        this.type = 'RELATIVE';\n        this.size = 16;\n    }\n}\n\n/**\n * An object of RegisterOp will have the name of the\n * register in the `value` attribute.\n */\nexport class RegisterOp extends Operand {\n    constructor({ value, position, lineNumber }) {\n        super(value, position, lineNumber);\n        this.type = 'REGISTER';\n\n        if (this.value.endsWith('L') || this.value.endsWith('H')) {\n            this.size = 8;\n        } else {\n            this.size = 16;\n        }\n    }\n}\n\n/**\n * An object of MemoryOp will have the address as a\n * Number in the `value` attribute\n */\nexport class MemoryOp extends Operand {\n    constructor({ value, position, lineNumber }) {\n        super(value, position, lineNumber);\n        this.type = 'MEMORY';\n        this.size = 16;\n        this.value = toNumber(value.slice(1, -1)).value;\n    }\n}\n","import {\n    nonToken,\n    instructionMnemonics,\n    registers,\n} from './constants.js';\nimport {\n    ImmediateOp,\n    RegisterOp,\n    StringToken,\n    RelativeOp,\n    MemoryOp,\n    Mnemonic,\n    Comment,\n    NewLine,\n    Separator,\n    InvalidTokenError,\n    UnterminatedQuoteError,\n    UnterminatedBracketError,\n} from './models/index.js';\n\nexport default class Lexer {\n    constructor(buffer) {\n        this.position = 0;\n        this.buffer = buffer;\n        this.bufferLength = buffer.length;\n        this.lineNumber = 1;\n    }\n\n    static isNewLine(c) {\n        return /^[\\n\\r]$/.test(c);\n    }\n\n    static isComment(c) {\n        return /^[;]$/.test(c);\n    }\n\n    static isAlpha(c) {\n        return /^[A-Za-z]$/.test(c);\n    }\n\n    static isNum(c) {\n        return /^[0-9]$/.test(c);\n    }\n\n    static isAlphaNum(c) {\n        return /^[A-Za-z0-9]$/.test(c);\n    }\n\n    static isBracket(c) {\n        return /^[[]$/.test(c);\n    }\n\n    static isQuote(c) {\n        return /^['\"]$/.test(c);\n    }\n\n    static isSeparator(c) {\n        return /^[,]$/.test(c);\n    }\n\n    skipNonTokens() {\n        while (this.position < this.bufferLength) {\n            const c = this.buffer[this.position];\n            if (nonToken.includes(c)) {\n                this.position += 1;\n            } else {\n                break;\n            }\n        }\n    }\n\n    processNewLine(c) {\n        this.lineNumber += 1;\n\n        const token = new NewLine({\n            value: c,\n            position: this.position,\n            lineNumber: this.lineNumber,\n        });\n\n        this.position += 1;\n        return token;\n    }\n\n    processComment() {\n        let end = this.position + 1;\n        while (end < this.bufferLength\n            && !Lexer.isNewLine(this.buffer[end])) {\n            end += 1;\n        }\n\n        const token = new Comment({\n            value: this.buffer.substring(this.position, end),\n            position: this.position,\n            lineNumber: this.lineNumber,\n        });\n\n        this.position = end;\n\n        return token;\n    }\n\n    processAlphaNum() {\n        let end = this.position + 1;\n        while (end < this.bufferLength\n            && Lexer.isAlphaNum(this.buffer[end])) {\n            end += 1;\n        }\n\n        const tok = this.buffer.substring(this.position, end);\n        const upperCaseTok = tok.toUpperCase();\n\n        if (instructionMnemonics.includes(upperCaseTok)) {\n            const token = new Mnemonic({\n                value: upperCaseTok,\n                position: this.position,\n                lineNumber: this.lineNumber,\n            });\n            this.position = end;\n            return token;\n        }\n\n        if (registers.includes(upperCaseTok)) {\n            const token = new RegisterOp({\n                value: upperCaseTok,\n                position: this.position,\n                lineNumber: this.lineNumber,\n            });\n            this.position = end;\n            return token;\n        }\n\n        const numberRegex = '(0X|0B|0|)[0-9A-F]+';\n        const immediateRegex = new RegExp(`^${numberRegex}$`);\n\n        if (immediateRegex.test(upperCaseTok)) {\n            const token = new ImmediateOp({\n                value: upperCaseTok,\n                position: this.position,\n                lineNumber: this.lineNumber,\n            });\n            this.position = end;\n            return token;\n        }\n\n        throw new InvalidTokenError({\n            position: this.position,\n            lineNumber: this.lineNumber,\n        });\n    }\n\n    processBrackets() {\n        const end = this.buffer.indexOf(']', this.position + 1);\n        if (end === -1) {\n            throw new UnterminatedBracketError({\n                position: this.position,\n                lineNumber: this.lineNumber,\n            });\n        }\n\n        const upperCaseTok = this.buffer.substring(this.position, end + 1).toUpperCase();\n\n        const numberRegex = '(0X|0B|0|)[0-9A-F]+';\n        const memoryRegex = new RegExp(`\\\\[${numberRegex}\\\\]`);\n        const relativeRegex = /^\\[[A-Z]{2}\\+[A-Z]{2}\\]$/;\n\n        if (memoryRegex.test(upperCaseTok)) {\n            const token = new MemoryOp({\n                value: upperCaseTok,\n                position: this.position,\n                lineNumber: this.lineNumber,\n            });\n            this.position = end + 1;\n            return token;\n        }\n\n        if (relativeRegex.test(upperCaseTok)) {\n            const token = new RelativeOp({\n                value: upperCaseTok,\n                position: this.position,\n                lineNumber: this.lineNumber,\n            });\n            this.position = end + 1;\n            return token;\n        }\n\n        throw new InvalidTokenError({\n            position: this.position,\n            lineNumber: this.lineNumber,\n        });\n    }\n\n    processQuote(quote) {\n        const end = this.buffer.indexOf(quote, this.position + 1);\n\n        if (end === -1) {\n            throw new UnterminatedQuoteError({\n                position: this.position,\n                lineNumber: this.lineNumber,\n            });\n        }\n\n        const token = new StringToken({\n            value: this.buffer.substring(this.position, end + 1),\n            position: this.position,\n            lineNumber: this.lineNumber,\n        });\n\n        this.position = end + 1;\n\n        return token;\n    }\n\n    processSeparator(separator) {\n        const end = this.position + 1;\n\n        const token = new Separator({\n            value: separator,\n            position: this.position,\n            lineNumber: this.lineNumber,\n        });\n\n        this.position = end;\n\n        return token;\n    }\n\n    nextToken() {\n        this.skipNonTokens();\n        if (this.position >= this.bufferLength) {\n            return undefined;\n        }\n\n        const c = this.buffer[this.position];\n\n        if (Lexer.isNewLine(c)) {\n            return this.processNewLine(c);\n        }\n\n        if (Lexer.isComment(c)) {\n            return this.processComment();\n        }\n\n        if (Lexer.isAlphaNum(c)) {\n            return this.processAlphaNum();\n        }\n\n        if (Lexer.isBracket(c)) {\n            return this.processBrackets();\n        }\n\n        if (Lexer.isQuote(c)) {\n            return this.processQuote(c);\n        }\n\n        if (Lexer.isSeparator(c)) {\n            return this.processSeparator(c);\n        }\n\n        throw new InvalidTokenError({\n            position: this.position,\n            lineNumber: this.lineNumber,\n        });\n    }\n\n    tokenize() {\n        const tokens = [];\n        while (this.position < this.bufferLength) {\n            const nextTok = this.nextToken();\n\n            if (nextTok) {\n                tokens.push(nextTok);\n            }\n        }\n\n        tokens.push(new NewLine({\n            value: '\\n',\n            position: this.positon + 1,\n            lineNumber: this.lineNumber + 1,\n        }));\n\n        return tokens;\n    }\n}\n","export default class Register {\n    /**\n     * Initialize value, lower half `l` and upper half `h` to 0.\n     */\n    constructor(initial) {\n        this.value = initial || 0;\n        this.h = 0;\n        this.l = 0;\n    }\n\n    /**\n     * Get either the entire value stored in the register, or the half specified in `half`.\n     * @param {string} half Accepts `l` for lower half and `h` for upper half.\n     */\n    get(half) {\n        if (!half) {\n            return this.value;\n        }\n\n        if (half === 'L') {\n            return this.l;\n        }\n\n        if (half === 'H') {\n            return this.h;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the value in the register, or in the specified half.\n     * @param {number} value The value to be set in the register or one of its halves.\n     * @param {string} half Specify the half in which the value is to be set (if any).\n     */\n    set(value, half) {\n        if (half) {\n            if (value > 2 ** 8) {\n                throw Error(\"Can't set more than 8 bit value to an 8 bit register\");\n            }\n        } else if (value > 2 ** 16) {\n            throw Error(\"Can't set more than 8 bit value to an 16 bit register\");\n        }\n        if (!half) {\n            this.value = value;\n            this.l = value & 255;\n            this.h = value >>> 8;\n            return;\n        }\n\n        if (half === 'L') {\n            this.l = value;\n        } else if (half === 'H') {\n            this.h = value;\n        }\n\n        this.value = (this.h << 4) + this.l;\n    }\n}\n\nexport class FlagRegister extends Register {\n    setFlag(flag) {\n        this.set(this.get() | flag);\n    }\n\n    unsetFlag(flag) {\n        this.set(this.get() & ~flag);\n    }\n\n    getFlag(flag) {\n        return (this.get() & flag) === 0 ? 0 : 1;\n    }\n}\n","import Register, { FlagRegister } from './models/register.js';\n\nexport default class Registers {\n    constructor() {\n        this.regs = {\n            AX: new Register(),\n            BX: new Register(),\n            CX: new Register(),\n            DX: new Register(),\n            IP: new Register(),\n            DI: new Register(),\n            SI: new Register(),\n            BP: new Register(400),\n            SP: new Register(400),\n            DS: new Register(0),\n            ES: new Register(400),\n            CS: new Register(600),\n            SS: new Register(200),\n            flags: new FlagRegister(),\n        };\n    }\n}\n","const MEM_SIZE = 1000;\n\nexport default class Memory {\n    constructor() {\n        this.mem = [];\n        this.initializeMem();\n    }\n\n    initializeMem() {\n        for (let i = 0; i < MEM_SIZE; i += 1) {\n            this.mem.push(0);\n        }\n    }\n\n    set(addr, val) {\n        if (val > 2 ** 16) {\n            throw Error(\"Can't set greater than 16 bit value in memory location\");\n        }\n        this.mem[addr] = val;\n    }\n\n    get(addr) {\n        return this.mem[addr];\n    }\n}\n","export default class Addressing {\n    constructor(registers, memory) {\n        this.registers = registers;\n        this.memory = memory;\n    }\n\n    get(op) {\n        if (!op) {\n            return null;\n        }\n        console.log(op);\n        const { regs } = this.registers;\n\n        switch (op.type) {\n        case 'IMMEDIATE':\n            return op.value;\n\n        case 'REGISTER':\n            if (['L', 'H'].includes(op.value[1])) {\n                if (!['A', 'B', 'C', 'D'].includes(op.value[0])) {\n                    throw SyntaxError(\"Only AX,BX,CX,DX registers can have 'L' or 'H' suffix\");\n                }\n                return regs[`${op.value[0]}X`].get(op.value[1]);\n            }\n            return regs[op.value].get();\n\n        case 'MEMORY':\n            return this.memory.get(regs.DS.get() + op.value);\n\n        case 'RELATIVE':\n            throw SyntaxError('Not implemented');\n\n        default:\n            throw SyntaxError(\"Invalid Adressing mode, this shoudln't happen ideally\");\n        }\n    }\n\n    set(op, value) {\n        const { regs } = this.registers;\n\n        switch (op.type) {\n        case 'IMMEDIATE':\n            throw SyntaxError(\"Can't set to immediate value???\");\n\n        case 'REGISTER':\n            if (['L', 'H'].includes(op.value[1])) {\n                if (!['A', 'B', 'C', 'D'].includes(op.value[0])) {\n                    throw SyntaxError(\"Only AX,BX,CX,DX registers can have 'L' or 'H' suffix\");\n                }\n                return regs[`${op.value[0]}X`].set(value, op.value[1]);\n            }\n            return regs[op.value].set(value);\n\n        case 'MEMORY':\n            return this.memory.set(regs.DS.get() + op.value, value);\n\n        case 'RELATIVE':\n            throw SyntaxError('Not implemented');\n\n        default:\n            throw SyntaxError(\"Invalid Adressing mode, this shoudln't happen ideally\");\n        }\n    }\n}\n","import Registers from './registers.js';\nimport Memory from './memory.js';\nimport Addressing from './addressing.js';\nimport { flags } from '../parser/constants.js';\n\nexport default class CPU {\n    constructor() {\n        this.registers = new Registers();\n        this.memory = new Memory();\n        this.addressing = new Addressing(this.registers, this.memory);\n    }\n\n    loadCode(code) {\n        const cs = this.registers.regs.CS.get();\n        code.forEach((elem, i) => {\n            this.memory.set(cs + i, elem);\n        });\n    }\n\n    step() {\n        let ip = this.registers.regs.IP.get();\n        const instruction = this.memory.get(this.registers.regs.CS.get() + ip);\n\n        const { mnemonic, op1, op2 } = instruction;\n        const { regs } = this.registers;\n        const getAddr = (target) => this.addressing.get(target);\n        const setAddr = (target, value) => this.addressing.set(target, value);\n\n        if (!mnemonic) {\n            throw SyntaxError('Invalid instruction at the current instruction pointer');\n        }\n\n        switch (mnemonic.value) {\n        case 'MOV':\n            if (op1.size < op2.size) {\n                throw SyntaxError(`Can't move larger ${op2.size} bit value to ${op1.size} bit location`);\n            }\n            setAddr(op1, getAddr(op2));\n            break;\n\n        case 'JS':\n            if (regs.flags.getFlag(flags.sign) === 1) {\n                regs.IP.set(op1);\n            }\n            break;\n\n        case 'ADD':\n            if (!op2) {\n                let s = op1.size === 8 ? regs.AX.get('l') : regs.AX.get();\n                s += getAddr(op1);\n                regs.AX.set(s);\n            } else {\n                let s = getAddr(op1);\n                s += getAddr(op2);\n                setAddr(op1, s);\n            }\n            break;\n\n        case 'DIV':\n            if (op1.size === 8) {\n                const al = regs.AX.get('l') / getAddr(op1);\n                const ah = regs.AX.get('l') % getAddr(op1);\n                regs.AX.set(al, 'l');\n                regs.AX.set(ah, 'h');\n            } else {\n                const ax = regs.AX.get() / getAddr(op1);\n                const dx = regs.AX.get() % getAddr(op1);\n                regs.AX.set(ax);\n                regs.DX.set(dx);\n            }\n            break;\n\n        case 'MUL':\n            if (op1.size === 8) {\n                const prod = regs.AX.get('l') * getAddr(op1);\n                regs.AX.set(prod);\n            } else {\n                const prod = regs.AX.get() * getAddr(op1);\n                regs.AX.set(prod);\n                // Store higher bits in DX\n            }\n            break;\n\n        case 'AND':\n            setAddr(op1, getAddr(op1) & getAddr(op2));\n            break;\n\n        case 'OR':\n            setAddr(op1, getAddr(op1) | getAddr(op2));\n            break;\n        case 'SUB': {\n            const s1 = getAddr(op1);\n            const s2 = getAddr(op2);\n            const ans = s1 - s2;\n            setAddr(op1, ans);\n            break;\n        }\n        case 'CMP': {\n            const s1 = getAddr(op1);\n            const s2 = getAddr(op2);\n            if (s1 === s2) {\n                regs.flags.setFlag(flags.zero);\n                regs.flags.unsetFlag(flags.carry);\n            } else if (s1 > s2) {\n                regs.flags.unsetFlag(flags.zero);\n                regs.flags.unsetFlag(flags.carry);\n            } else {\n                regs.flags.setFlag(flags.carry);\n                regs.flags.unsetFlag(flags.zero);\n            }\n            break;\n        }\n        case 'NOT': {\n            setAddr(op1, ~getAddr(op1));\n            break;\n        }\n        case 'JMP': {\n            ip = getAddr(op1) - 1;\n            break;\n        }\n        case 'JE':\n        case 'JZ':\n        {\n            if (regs.flags.getFlag(flags.zero) === 1) {\n                ip = getAddr(op1) - 1;\n            }\n            break;\n        }\n        case 'JNE':\n        case 'JNZ':\n        {\n            if (regs.flags.getFlag(flags.zero) === 0) {\n                ip = getAddr(op1) - 1;\n            }\n            break;\n        }\n        default:\n            break;\n        }\n\n        // Example for setting/unsetting/checking flag register\n        // import { flags } from '../parser/constants.js';\n        // regs.flags.setFlag(flags.zero);\n        // regs.flags.setFlag(flags.auxilliary);\n        // regs.flags.unsetFlag(flags.auxilliary);\n        // console.log(regs.flags.getFlag(flags.zero));\n        console.log(regs);\n        regs.IP.set(ip + 1);\n    }\n}\n","/**\n * Grammar:\n *\n * S: ins_2 op_1 op_2\n * S: ins_2_1 op_1 [op_2]\n * S: ins_1 op_1\n * S: ins_1_0 [op_1]\n * S: ins_0\n *\n * ins_2 -> 2 address instruction\n * ins_2_1 -> 2 address or 1 address instruction\n * ins_1 -> 1 address instruction\n * ins_1_0 -> 1 address or 0 address instruction\n * ins_0 -> 0 address instruction\n */\nimport {\n    SyntaxError,\n    Instruction,\n} from './models/index.js';\n\nexport default class Parser {\n    constructor(tokens) {\n        this.rawInstructions = Parser.getInstructionsFromTokens(tokens);\n        this.instructions = [];\n    }\n\n    static getInstructionsFromTokens(tokens) {\n        const instructions = [];\n        let instruction = [];\n        tokens.forEach((token) => {\n            if (token.name === 'NEWLINE') {\n                if (instruction.length) {\n                    instructions.push(instruction);\n                }\n                instruction = [];\n            } else if (token.name !== 'COMMENT') {\n                instruction.push(token);\n            }\n        });\n\n        return instructions;\n    }\n\n    parse() {\n        this.rawInstructions.forEach((instruction) => {\n            if (instruction.length > 4) {\n                throw new SyntaxError();\n            }\n\n            if (instruction.length > 2\n                && instruction[2].name !== 'SEPARATOR') {\n                throw new SyntaxError();\n            }\n\n            this.instructions.push(new Instruction({\n                mnemonic: instruction[0],\n                op1: instruction[1] || null,\n                op2: instruction[3] || null,\n            }));\n        });\n\n        return this.instructions;\n    }\n}\n","import Lexer from './parser/lexer.js';\nimport CPU from './cpu/core.js';\nimport Parser from './parser/parser.js';\n\nclass Emulator {\n    constructor() {\n        this.cpu = new CPU();\n    }\n\n    loadCode(code) {\n        const tokens = (new Lexer(code)).tokenize();\n        const parsed = (new Parser(tokens)).parse();\n        this.cpu.loadCode(parsed);\n    }\n\n    getRegisters() {\n        const regs = {};\n        Object.entries(this.cpu.registers.regs).forEach((element) => {\n            if (['A', 'B', 'C', 'D'].includes(element[0][0])) {\n                regs[`${element[0][0]}H`] = element[1].get('H');\n                regs[`${element[0][0]}L`] = element[1].get('L');\n            }\n            regs[element[0]] = element[1].get();\n        });\n\n        return regs;\n    }\n\n    getMemory() {\n        return [...this.cpu.memory.mem];\n    }\n\n    resetState() {\n        this.cpu = new CPU();\n    }\n}\n\nexport default new Emulator();\n","import { createSlice } from '@reduxjs/toolkit';\nimport emulator from '../emulator/emulator';\n\nconst initialState = {\n    registers: emulator.getRegisters(),\n    memory: emulator.getMemory(),\n    code: '',\n};\n\nconst emulatorSlice = createSlice({\n    name: 'emulator',\n    initialState,\n    reducers: {\n        updateCode(state, action) {\n            state.code = action.payload;\n        },\n        updateRegisters(state, action) {\n            state.registers = action.payload;\n        },\n        updateMemory(state, action) {\n            state.memory = action.payload;\n        },\n    },\n});\n\nexport const selectCode = (state) => state.emulator.code;\nexport const selectMemory = (state) => state.emulator.memory;\nexport const selectRegisters = (state) => state.emulator.registers;\n\nexport const { updateCode, updateRegisters, updateMemory } = emulatorSlice.actions;\n\nexport default emulatorSlice.reducer;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n    faPlayCircle,\n    faForward,\n    faArrowRight,\n    faArrowLeft,\n} from '@fortawesome/free-solid-svg-icons';\nimport { selectCode, updateRegisters } from '../../slices/emulatorSlice';\nimport emulator from '../../emulator/emulator';\n\nconst useStyles = makeStyles((theme) => ({\n    buttonsContainer: {\n        background: theme.palette.background.default,\n        color: theme.palette.text.primary,\n        padding: '1.2rem',\n    },\n    fontAwesomeIcon: {\n        width: '3rem',\n        height: '2rem',\n        outline: 'none',\n        display: 'inline-block',\n        textAlign: 'center',\n        background: 'none',\n    },\n}));\n\nexport default function ButtonsContainer() {\n    const classes = useStyles();\n\n    const dispatch = useDispatch();\n\n    const code = useSelector(selectCode);\n\n    const loadCode = () => {\n        emulator.loadCode(code);\n    };\n\n    const stepClick = () => {\n        loadCode();\n        emulator.cpu.step();\n        dispatch(updateRegisters(emulator.getRegisters()));\n    };\n\n    return (\n        <div className={classes.buttonsContainer}>\n            <button type=\"button\" className={classes.fontAwesomeIcon}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n            </button>\n            <button type=\"button\" className={classes.fontAwesomeIcon}>\n                <FontAwesomeIcon icon={faPlayCircle} />\n            </button>\n            <button type=\"button\" className={classes.fontAwesomeIcon} onClick={stepClick}>\n                <FontAwesomeIcon icon={faArrowRight} />\n            </button>\n            <button type=\"button\" className={classes.fontAwesomeIcon}>\n                <FontAwesomeIcon icon={faForward} />\n            </button>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-assembly_x86';\nimport 'ace-builds/src-noconflict/theme-dracula';\n\nimport { updateCode } from '../../slices/emulatorSlice';\nimport ButtonsContainer from '../ButtonsContainer';\n\nexport default function Editor() {\n    const dispatch = useDispatch();\n\n    const onChange = (code) => {\n        dispatch(updateCode(code));\n    };\n\n    const defaultMsg = `; Welcome to 8086.js!\n;\n; This is still under development and supports few instructions such as MOV, ADD, AND, etc.\n; Currently, it does not support pre-processor directives or interrupts.\n; Contribute to 8086.js at https://github.com/roerohan/8086.js :D\n\n`;\n\n    return (\n        <div>\n            <ButtonsContainer />\n\n            <AceEditor\n                mode=\"assembly_x86\"\n                fontSize=\"1rem\"\n                theme=\"dracula\"\n                onChange={onChange}\n                value={defaultMsg}\n                showPrintMargin={false}\n                height=\"100vh\"\n                width=\"50vw\"\n                name=\"editor\"\n                editorProps={{ $blockScrolling: true }}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    display: {\n        width: 'inherit',\n        height: '45vh',\n        background: '#21222C',\n        borderRadius: '0.5rem',\n        padding: '0.5rem',\n        border: '1px solid #44475A',\n    },\n    heading: {\n        borderBottom: '1px solid #44475A',\n        paddingBottom: '0.5rem',\n    },\n}));\n\nexport default function Display() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.display}>\n            <div className={classes.heading}>Display</div>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport propTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport emulator from '../../emulator/emulator';\nimport { selectRegisters, updateRegisters } from '../../slices/emulatorSlice';\n\nconst useStyles = makeStyles((theme) => ({\n    register: {\n        backgroundColor: theme.palette.background.default,\n        color: theme.palette.text.primary,\n        width: '4rem',\n        fontSize: '1.2rem',\n        padding: '0.3rem',\n        textAlign: 'center',\n        border: `1px solid ${theme.palette.text.secondary}`,\n    },\n    label: {\n        width: '3rem',\n        display: 'inline-block',\n        color: theme.palette.text.secondary,\n    },\n    regContainer: {\n        height: '5rem',\n    },\n}));\n\nexport default function Register(props) {\n    const classes = useStyles();\n    const { name } = props;\n    const registers = useSelector(selectRegisters);\n    const dispatch = useDispatch();\n\n    const [regValue, setRegValue] = useState(registers[name]);\n\n    const reg = registers[name];\n    useEffect(() => {\n        setRegValue(registers[name]);\n    }, [reg, name, registers]);\n    const changeRegValue = ({ target }) => {\n        console.log(target.value);\n        emulator.cpu.registers.regs[name].set(target.value);\n        setRegValue(target.value);\n        dispatch(updateRegisters(registers));\n    };\n\n    return (\n        <div className={classes.regContainer}>\n            <span className={classes.label}>{name}</span>\n            <input\n                id={name}\n                value={regValue}\n                onChange={changeRegValue}\n                className={classes.register}\n            />\n        </div>\n    );\n}\n\nRegister.propTypes = {\n    name: propTypes.string.isRequired,\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport { Paper } from '@material-ui/core';\n\nimport { selectRegisters, selectMemory } from '../../slices/emulatorSlice';\nimport Register from '../Register';\n\nconst useStyles = makeStyles((theme) => ({\n    regAndMem: {\n        textAlign: 'left',\n        marginTop: '2rem',\n        display: 'flex',\n    },\n    regRow: {\n        width: '12rem',\n    },\n    paper: {\n        color: theme.palette.text.primary,\n        borderRadius: '0.5rem',\n        padding: '0.5rem',\n        border: '1px solid #44475A',\n        width: '27vw',\n        height: '43vh',\n        background: '#21222C',\n        overflowY: 'scroll',\n    },\n    heading: {\n        borderBottom: '1px solid #44475A',\n        paddingBottom: '0.5rem',\n        textAlign: 'center',\n        position: 'sticky',\n    },\n    memoryRow: {\n        width: '100%',\n        marginTop: '0.1rem',\n        paddingBottom: '0.5rem',\n        borderBottom: '1px solid #44475A',\n    },\n    memHeading: {\n        fontWeight: 'bold',\n        marginTop: '0.5rem',\n        paddingBottom: '0.5rem',\n        borderBottom: '1px solid #44475A',\n    },\n    address: {\n        width: '10rem',\n        display: 'inline-block',\n        marginLeft: '3rem',\n        textAlign: 'center',\n    },\n    value: {\n        textAlign: 'center',\n        display: 'inline-block',\n        width: '15rem',\n    },\n}));\n\nexport default function RegAndMem() {\n    const classes = useStyles();\n\n    const registers = useSelector(selectRegisters);\n    const memory = useSelector(selectMemory);\n\n    console.log(memory);\n\n    return (\n        <div className={classes.regAndMem}>\n            <div className={classes.regRow}>\n                <Register name=\"AX\" value={registers.AX} />\n                <Register name=\"BX\" value={registers.BX} />\n                <Register name=\"CX\" value={registers.CX} />\n                <Register name=\"DX\" value={registers.DX} />\n                <Register name=\"BP\" value={registers.BP} />\n                <Register name=\"SP\" value={registers.SP} />\n            </div>\n            <div className={classes.regRow}>\n                <Register name=\"SI\" value={registers.SI} />\n                <Register name=\"DI\" value={registers.DI} />\n                <Register name=\"DS\" value={registers.DS} />\n                <Register name=\"ES\" value={registers.ES} />\n                <Register name=\"SS\" value={registers.SS} />\n                <Register name=\"CS\" value={registers.CS} />\n            </div>\n            <div>\n                <Paper className={classes.paper}>\n                    <div className={classes.heading}>Memory</div>\n                    <div>\n                        <div className={classes.memHeading}>\n                            <span className={classes.address}>Address</span>\n                            <span className={classes.value}>Value</span>\n                        </div>\n                        {memory.map((item, index) => (\n                            <div className={classes.memoryRow}>\n                                <span className={classes.address}>\n                                    {index}\n                                </span>\n                                <span className={classes.value}>\n                                    {item}\n                                </span>\n                            </div>\n                        ))}\n                    </div>\n                </Paper>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Display from '../Display';\nimport RegAndMem from '../RegAndMem';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.primary,\n        height: '100vh',\n    },\n}));\n\nexport default function Emulator() {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.paper}>\n            <Display />\n            <RegAndMem />\n        </Paper>\n    );\n}\n","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Editor from '../../components/Editor';\nimport Emulator from '../../components/Emulator';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        flexGrow: 1,\n        height: '100vh',\n    },\n}));\n\nexport default function Home() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={1}>\n                <Grid item xs={6}>\n                    <Emulator />\n                </Grid>\n                <Grid item xs={6}>\n                    <Editor />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport Home from './pages/Home';\n\n/**\n * Theme color references:\n * fgColor: '#f8f8f2',\n   bgColor: '#282a36',\n   dark: '#44475a',\n   primary: '#6272a4',\n   primText: '',\n   error: '#ff5555',\n   default: '#44475a',\n   warning: '',\n */\n\nconst theme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        background: {\n            default: '#282a36',\n            paper: '#282a36',\n        },\n        text: {\n            primary: '#f8f8f2',\n            secondary: '#6272a4',\n        },\n    },\n});\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <Home />\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport emulatorReducer from '../slices/emulatorSlice';\n\nexport default configureStore({\n    reducer: {\n        emulator: emulatorReducer,\n    },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport store from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}